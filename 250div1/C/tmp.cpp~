#include<algorithm>
#include<bitset>
#include<cassert>
#include<complex>
#include<cstdio>
#include<cstring>
#include<iomanip>
#include<iostream>
#include<map>
#include<queue>
#include<set>
#include<stack>
#include<string>
#include<vector>
#define FOR(i, a, b) for(int i =(a); i <=(b); ++i)
#define FORD(i, a, b) for(int i = (a); i >= (b); --i)
#define REP(i, n) for(int i = 0;i <(n); ++i)
#define VAR(v, i) __typeof(i) v=(i)
#define FORE(i, c) for(VAR(i, (c).begin()); i != (c).end(); ++i)
#define ALL(x) (x).begin(), (x).end()
#define SZ(x) ((int)(x).size())
#define PB push_back
#define MP make_pair
#define X first
#define Y second 
//#define X real()
//#define Y imag()
#define debug(x) {cerr <<#x <<" = " <<x <<endl; }
#define debugv(x) {{cerr <<#x <<" = "; FORE(itt, (x)) cerr <<*itt <<", "; cerr <<endl; }}

#define dprintf(...) fprintf(stderr, __VA_ARGS__)
using namespace std;
typedef long long LL;
typedef long double LD;
typedef pair<int, int> PII;
typedef vector<int> VI;

template<class C> void mini(C&a4, C b4){a4=min(a4, b4); }
template<class C> void maxi(C&a4, C b4){a4=max(a4, b4); }
template<class T1, class T2>
ostream& operator<< (ostream &out, pair<T1, T2> pair) { return out << "(" << pair.X << ", " << pair.Y << ")";}

typedef complex<LL> P;

vector<P> poly;
int n;

#define N 300 
#define M 1000000007
LL area[N][N];
LL go_area(int start, int stop) {
	LL res = 0;
	int i = start;
	do{
		res += imag(poly[i]*conj(poly[i+1]));
		i=(i+1)%n;
	}while(i!=stop);
	res += imag(poly[stop]*conj(poly[start]));
	return res;
};

LL dp[N][N];

LL cnt(int a, int b);

LL go_and_try(int a, int x, int b) {
	P p1 = poly[x]-poly[a];
	P p2 = poly[b]-poly[a];
	LL ta = imag(p1*conj(p2));
	if(abs(ta) == 0) return 0;

	if(abs(ta) + abs(area[a][x]) + abs(area[x][b]) != abs(area[a][b])) {
		return 0;
	};

	return (cnt(a,x)*cnt(x,b))%M;
};

LL cnt(int a, int b) {
	if(dp[a][b] != -1) return dp[a][b];
	if(b == (a+1)%n) return dp[a][b] = 1;
	LL res = 0;
	for(int i=a+1; i!=b; i = (i+1)%n) {
		LL cc = go_and_try(a, i, b);
		res = (res+cc)%M;
	};
	return dp[a][b] = res;
};

int main(){
	scanf("%d", &n);
	REP(i, n) {
		int a, b;
		scanf("%d %d", &a, &b);
		poly.PB(P(a,b));
	};
	poly.PB(poly[0]);
	REP(i, n) REP(j, n) dp[i][j] = -1;

	LL ar = go_area(0,0);
	if(ar < 0) {
		reverse(ALL(poly));
	};

	REP(i, n) REP(j, n) area[i][j] = go_area(i, j);
	LL rres = cnt(0, n-1);
	cout << rres << endl;

    return 0;
}
